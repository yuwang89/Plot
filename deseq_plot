###KEGG $GO by GAGE
BiocManager::install("gage")
BiocManager::install("pathview")

require(gage)
data(kegg.gs)
data(go.gs)

#set go database
go.hs <- go.gsets(species="human")
go.bp.gs <- go.hs$go.sets[go.hs$go.subs$BP]
go.mf.gs <- go.hs$go.sets[go.hs$go.subs$MF]
go.cc.gs <- go.hs$go.sets[go.hs$go.subs$CC]

#load in libraries to annotate data
library(AnnotationDbi)
library(org.Hs.eg.db)

# annotate the deseq2 results with additional gene identifiers
tumor_not_normal$symbol <- mapIds(org.Hs.eg.db, keys=row.names(tumor_not_normal), column="SYMBOL", keytype="ENSEMBL", multiVals="first")
tumor_not_normal$entrez <- mapIds(org.Hs.eg.db, keys=row.names(tumor_not_normal), column="ENTREZID", keytype="ENSEMBL", multiVals="first")
tumor_not_normal$name <- mapIds(org.Hs.eg.db, keys=row.names(tumor_not_normal), column="GENENAME", keytype="ENSEMBL", multiVals="first")

#grab the log fold changes for everything
deseq.fc = tumor_not_normal$apeglm_log2FoldChange
names(deseq.fc)= rownames(tumor_not_normal)
exp.fc = deseq.fc
#gage
fc.kegg.p <- gage(exp.fc, gsets = kegg.gs, ref = NULL, samp = NULL)

fc.go.bp.p <- gage(exp.fc, gsets = go.bp.gs)
fc.go.mf.p <- gage(exp.fc, gsets = go.mf.gs)
fc.go.cc.p <- gage(exp.fc, gsets = go.cc.gs)

# covert the kegg results to data frames
fc.kegg.p.up <- as.data.frame(fc.kegg.p$greater)

fc.kegg.p.down <- as.data.frame(fc.kegg.p$less)

write.csv(fc.kegg.p.up,file="T_not_N_KEGG_UP.csv",row.names=T)
write.csv(fc.kegg.p.down,file="T_not_N_KEGG_down.csv",row.names=T)

# convert the go results to data frames
fc.go.bp.p.up <- as.data.frame(fc.go.bp.p$greater)
fc.go.mf.p.up <- as.data.frame(fc.go.mf.p$greater)
fc.go.cc.p.up <- as.data.frame(fc.go.cc.p$greater)

fc.go.bp.p.down <- as.data.frame(fc.go.bp.p$less)
fc.go.mf.p.down <- as.data.frame(fc.go.mf.p$less)
fc.go.cc.p.down <- as.data.frame(fc.go.cc.p$less)

write.csv(fc.go.bp.p.up,file="GO_BP_UP.csv",row.names=T)
write.csv(fc.go.mf.p.up,file="GO_MF_UP.csv",row.names=T)
write.csv(fc.go.cc.p.up,file="GO_CC_UP.csv",row.names=T)

write.csv(fc.go.bp.p.down,file="GO_BP_down.csv",row.names=T)
write.csv(fc.go.mf.p.down,file="GO_MF_down.csv",row.names=T)
write.csv(fc.go.cc.p.down,file="GO_CC_down.csv",row.names=T)

#greater
sel <- fc.kegg.p$greater[, "q.val"] < 0.1 &
 !is.na(fc.kegg.p$greater[, "q.val"])

 path.ids <- rownames(fc.kegg.p$greater)[sel]
 
 #less
 sel.l <- fc.kegg.p$less[, "q.val"] < 0.1 &
 !is.na(fc.kegg.p$less[,"q.val"])
 
 path.ids.l <- rownames(fc.kegg.p$less)[sel.l]
 
 path.ids2 <- substr(c(path.ids, path.ids.l), 1, 8)
 require(pathview)
 #view first 3 pathways as demo
 pv.out.list <- sapply(path.ids2[1:3], function(pid) pathview(
 gene.data = exp.fc, pathway.id = pid,
 species = "hsa", out.suffix="deseq2", kegg.native=FALSE))
 
 ###VEEN plot
 venn.diagram(x=list(Tumor=tumor_sig$GID,Normal=normal_sig$GID),
             category.names = c("Tumor:White vs. AA" , "Normal:White vs. AA"),
             pattern = 'Venn_2set_simple',
             #filename
             filename=paste(model,"_VennDiagram.png",sep=""),
             # Output features
             imagetype="png" ,
             height = 1000 , 
             width = 1000 , 
             resolution = 300,
             # Circles
             lwd = 2,
             cex=1.5,
             lty = 'blank',
             fill = myCol, 
             cat.cex = 0.8,
             cat.default.pos = "outer",
             cat.pos = c(-20, 20),
             cat.dist = c(0.06, 0.06),
             cat.col=myCol,
             ext.text=TRUE)
             #if want to perform hypergeometric test 
             #hyper.test=TRUE,
             #total.population=nrow(tumor_res))
            
####volcano 
top30_n_name <- m2_n_top30$external_gene_name
volcano_Ntop30=EnhancedVolcano(temp3,
                                lab = temp3$external_gene_name,
                                x = "apeglm_log2FoldChange",
                                y = "padj",
                                selectLab = top30_n_name,
                                labSize = 4,
                                labCol = 'black',
                                pointSize = 4,
                                drawConnectors = TRUE,
                                maxoverlapsConnectors = Inf,
                                pCutoff = 0.05,
                                FCcutoff = 0.5, 
                                #xlim = c(-1,1),
                                #ylim = c(0,6),
                                title = "BW_N")
 volcano_Ntop30
 
 ###heatmap 
 ###get variance stabalized transformed transcript expression
#T vs N
vsd0 <- vst(dds0, blind=FALSE)
keep_0_sig <- temp4$GID
mat0 <- assay(vsd0)[keep_0_sig,]
anno_0 <- as.data.frame(colData(vsd0)[,c("race","Tumor_Normal")])
anno_0 <- anno_0 %>% dplyr::arrange(race) %>% dplyr::arrange(Tumor_Normal)
orderid <- rownames(anno_0)
mat00 <- mat0[,orderid]
pheatmap(log10(mat00), annotation_col = anno_0, cluster_cols = F, scale = "row")

 
 
